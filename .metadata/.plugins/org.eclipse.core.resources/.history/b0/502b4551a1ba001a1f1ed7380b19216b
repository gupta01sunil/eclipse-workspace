package PropineTestTasks;
import java.lang.String;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import org.testng.Assert;
import org.testng.annotations.*;
import TestFramework.Propine;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.*;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.MutableCapabilities;
import org.openqa.selenium.remote.DesiredCapabilities;
import java.util.concurrent.TimeUnit;
import java.text.SimpleDateFormat;  
import java.text.DateFormat;
import java.util.Date;
import org.w3c.dom.Element;
import Utilities.Utility;
public class PropineDatePickerTasks {
	public WebDriver browser;
	
    @BeforeTest
    public void beforeTest() {
    	// Get current date time
    	// Inbuilt format
		            DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd_MM_yyyy");
		            CharSequence cs = new String("28/12/2020");
    				LocalDate currentDateTime = LocalDate.parse(cs);
    				   				
    				//System.out.println(DateTimeFormatter.ofPattern("dd_MM_yyyy_HH_mm_ss"));
    				// Format LocalDateTime
    				String formattedDateTime = currentDateTime.format(dateFormatter);
       System.setProperty("webdriver.chrome.driver", ".//WebDrivers//chromedriver.exe");
	   //Initialize Browser.
	   browser = new ChromeDriver();
       //Maximize browser
       browser.manage().window().maximize();
    }

    @Test
    public void VerifyDatePickerWithValidDateFormatsAndValidSeparators() {
	   try {
		     Element eElement = (Element) Utility.getNodeData("Scenario1");
		     System.out.println("Test VerifyDatePickerWithValidDateFormatsAndValidSeparators started execution.");
		     Propine dPicker = new Propine(browser);
		     dPicker.LaunchPropine(Utility.getData(eElement, "PropineUrl"));
		     dPicker.ValidateDateParser("VerifyDatePickerWithValidDateFormatsAndValidSeparators", Utility.getData(eElement, "ValidDate"), Utility.getData(eElement, "DateFormats"),Utility.getData(eElement, "Separators"), Utility.getData(eElement, "ExpectedResult"),"");
	         System.out.println("Test VerifyDatePickerWithValidDateFormatsAndValidSeparators completed execution.");
	   }
	   catch (Exception ex) {
          throw new RuntimeException(ex.getMessage());
	   }
    }
    
    @Test
    public void VerifyDatePickerWithValidDateFormatsAndInValidSeparators() {
	   try {
		     Element eElement = (Element) Utility.getNodeData("Scenario2");
		     System.out.println("Test VerifyDatePickerWithValidDateFormatsAndInValidSeparators started execution.");
		     Propine dPicker = new Propine(browser);
		     dPicker.LaunchPropine(Utility.getData(eElement, "PropineUrl"));
		     dPicker.ValidateDateParser("VerifyDatePickerWithValidDateFormatsAndInValidSeparators", Utility.getData(eElement, "ValidDate"), Utility.getData(eElement, "DateFormats"),Utility.getData(eElement, "Separators"), Utility.getData(eElement, "ExpectedResult"),"");
	         System.out.println("Test VerifyDatePickerWithValidDateFormatsAndInValidSeparators completed execution.");
	   }
	   catch (Exception ex) {
          throw new RuntimeException(ex.getMessage());
	   }
    }
    
    @Test
    public void VerifyDatePickerWithValidDateFormatsAndValidSeparatorsWith00Date() {
	   try {
		     Element eElement = (Element) Utility.getNodeData("Scenario1");
		     System.out.println("Test VerifyDatePickerWithValidDateFormatsAndValidSeparatorsWith00Date started execution.");
		     Propine dPicker = new Propine(browser);
		     dPicker.LaunchPropine(Utility.getData(eElement, "PropineUrl"));
		     dPicker.ValidateDateParser("VerifyDatePickerWithValidDateFormatsAndValidSeparatorsWith00Date", Utility.getData(eElement, "InvalidDate00"), Utility.getData(eElement, "DateFormats"),Utility.getData(eElement, "Separators"), Utility.getData(eElement, "ExpectedResultForInvalid"),"");
	         System.out.println("Test VerifyDatePickerWithValidDateFormatsAndValidSeparatorsWith00Date completed execution.");
	   }
	   catch (Exception ex) {
          throw new RuntimeException(ex.getMessage());
	   }
    }
    
    @Test
    public void VerifyDatePickerWithValidDateFormatsAndValidSeparatorsWith32Date() {
	   try {
		     Element eElement = (Element) Utility.getNodeData("Scenario1");
		     System.out.println("Test VerifyDatePickerWithValidDateFormatsAndValidSeparatorsWith32Date started execution.");
		     Propine dPicker = new Propine(browser);
		     dPicker.LaunchPropine(Utility.getData(eElement, "PropineUrl"));
		     dPicker.ValidateDateParser("VerifyDatePickerWithValidDateFormatsAndValidSeparatorsWith32Date", Utility.getData(eElement, "InvalidDate32"), Utility.getData(eElement, "DateFormats"),Utility.getData(eElement, "Separators"), Utility.getData(eElement, "ExpectedResultForInvalid"),"");
	         System.out.println("Test VerifyDatePickerWithValidDateFormatsAndValidSeparatorsWith32Date completed execution.");
	   }
	   catch (Exception ex) {
          throw new RuntimeException(ex.getMessage());
	   }
    }
    
    @Test
    public void VerifyDatePickerWithInValidDateFormatsWithoutYearAndAllSeparators() {
	   try {
		     Element eElement = (Element) Utility.getNodeData("Scenario3");
		     System.out.println("Test VerifyDatePickerWithInValidDateFormatsWithoutYearAndAllSeparators started execution.");
		     Propine dPicker = new Propine(browser);
		     dPicker.LaunchPropine(Utility.getData(eElement, "PropineUrl"));
		     dPicker.ValidateDateParser("VerifyDatePickerWithInValidDateFormatsWithoutYearAndAllSeparators", Utility.getData(eElement, "ValidDate"), Utility.getData(eElement, "DateFormats"),Utility.getData(eElement, "Separators"), Utility.getData(eElement, "ExpectedResult"),"");
	         System.out.println("Test VerifyDatePickerWithInValidDateFormatsWithoutYearAndAllSeparators completed execution.");
	   }
	   catch (Exception ex) {
          throw new RuntimeException(ex.getMessage());
	   }
    }
    
    @Test
    public void VerifyDatePickerWithInValidDateFormatsWithoutDateAndAllSeparators() {
	   try {
		   
		     Element eElement = (Element) Utility.getNodeData("Scenario4");
		     System.out.println("Test VerifyDatePickerWithInValidDateFormatsWithoutDateAndAllSeparators started execution.");
		     Propine dPicker = new Propine(browser);
		     dPicker.LaunchPropine(Utility.getData(eElement, "PropineUrl"));
		     dPicker.ValidateDateParser("VerifyDatePickerWithInValidDateFormatsWithoutDateAndAllSeparators", Utility.getData(eElement, "ValidDate"), Utility.getData(eElement, "DateFormats"),Utility.getData(eElement, "Separators"), Utility.getData(eElement, "ExpectedResult"),"");
	         System.out.println("Test VerifyDatePickerWithInValidDateFormatsWithoutDateAndAllSeparators completed execution.");
	   }
	   catch (Exception ex) {
          throw new RuntimeException(ex.getMessage());
	   }
    }
    
    @Test
    public void VerifyDatePickerWithValidDateFormatsWithAllSeparatorsAndString() {
	   try {
		     Element eElement = (Element) Utility.getNodeData("Scenario5");
		     System.out.println("Test VerifyDatePickerWithValidDateFormatsWithAllSeparatorsAndString started execution.");
		     Propine dPicker = new Propine(browser);
		     dPicker.LaunchPropine(Utility.getData(eElement, "PropineUrl"));
		     dPicker.ValidateDateParser("VerifyDatePickerWithValidDateFormatsWithAllSeparatorsAndString", Utility.getData(eElement, "ValidDate"), Utility.getData(eElement, "DateFormats"),Utility.getData(eElement, "Separators"), Utility.getData(eElement, "ExpectedResult"),Utility.getData(eElement, "ShippingMessage"));
	         System.out.println("Test VerifyDatePickerWithValidDateFormatsWithAllSeparatorsAndString completed execution.");
	   }
	   catch (Exception ex) {
          throw new RuntimeException(ex.getMessage());
	   }
    }
    
    @Test
    public void VerifyDatePickerWithInvalidMonthAndValidYear() {
	   try {
		     Element eElement = (Element) Utility.getNodeData("Scenario5");
		     System.out.println("Test VerifyDatePickerWithInvalidMonthAndValidYear started execution.");
		     String testReport = "The Report for the Scenario: VerifyDatePickerWithInvalidMonthAndValidYear";
		     Propine dPicker = new Propine(browser);
		     dPicker.LaunchPropine(Utility.getData(eElement, "PropineUrl"));
		     String actualResult = dPicker.ClickOnDateFormatValidator(Utility.getData(eElement, "InvalidDate"));
		     boolean result = actualResult.contains(Utility.getData(eElement, "ExpectedResult"));
		     String testResult = "Passed.";
		     if(result == false) testResult = "Failed.";
		     testReport +="\n"+"Date Format"+"     |"+"Actual Result"+"     |"+"ExpectedResult"+"     |"+"Test Result";
		     testReport +="\n"+ Utility.getData(eElement, "InvalidDate") +"|"+actualResult+"|"+Utility.getData(eElement, "ExpectedResult")+"|"+testResult;
		     if(result == false) testReport += "\n Result: Failed.";
		     else testReport += "\n Result: Passed.";
		     Utility.TestReportLog("VerifyDatePickerWithInvalidMonthAndValidYear",testReport);
		     System.out.println("Test VerifyDatePickerWithInvalidMonthAndValidYear completed execution.");
		     if(result == false) Assert.fail("Test VerifyDatePickerWithInvalidMonthAndValidYear Failed with validation.");
	   } 
	   catch (Exception ex) {
          throw new RuntimeException(ex.getMessage());
	   }
    }
    
    @AfterTest
    public void afterTest() {
    	browser.manage().deleteAllCookies();
    	//Close browser
	    browser.close();
	    //Quits ChromeDriver.
	    browser.quit();
    }
}
